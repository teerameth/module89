# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.

# Docker file for aarch64 based Jetson device
#ARG BASE_IMAGE="dustynv/ros:foxy-ros-base-l4t-r32.6.1"
ARG BASE_IMAGE="timongentzsch/l4t-ubuntu20-pytorch:latest"
FROM ${BASE_IMAGE}

# Disable terminal interaction for apt
ENV DEBIAN_FRONTEND=noninteractive

# Fundamentals
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    curl \
    git \
    lsb-release \
    sudo \
    tar \
    unzip \
    vim \
    wget \
    software-properties-common \
&& rm -rf /var/lib/apt/lists/*

# Install OpenCV dependencies
RUN apt-get update && apt-get install -y \
    libavformat-dev \
    libjpeg-dev \
    libopenjp2-7-dev \
    libpng-dev \
    libpq-dev \
    libswscale-dev \
    libtbb2 \
    libtbb-dev \
    libtiff-dev \
    pkg-config \
    yasm \
&& rm -rf /var/lib/apt/lists/*

# Install additional packages needed for ROS2 dependencies
RUN apt-get update && apt-get install -y \
    python3-distutils \
    libboost-all-dev \
    libboost-dev \
    libpcl-dev \
&& rm -rf /var/lib/apt/lists/*

# sklearn dependencies
RUN apt-get update && apt-get install -y \
    gfortran \
    libatlas-base-dev \
    python3-scipy \
&& rm -rf /var/lib/apt/lists/*

# sklearn Python dependencies
RUN python3 -m pip install -U \
    Cython \
    wheel

# Install sklearn
RUN python3 -m pip install -U \
    scikit-learn

# Install Git-LFS
RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \
        apt-get update && apt-get install -y \
        git-lfs \
&& rm -rf /var/lib/apt/lists/*

# Install Pytorch and ONNX
RUN apt-get update && apt-get install -y libopenblas-base libopenmpi-dev && \
        python3 -m pip install -U numpy onnx

# Nvidia container runtime mounts cuda libraries from the host into the container, but dpkg still
# thinks that they are not installed. Tell dpkg that these libraries are installed so VPI's
# dependencies will be satisfied.
ARG DPKG_STATUS
RUN echo "$DPKG_STATUS" >> /var/lib/dpkg/status

# Add nvidia repo/public key and install VPI libraries
RUN curl https://repo.download.nvidia.com/jetson/jetson-ota-public.asc > /etc/apt/trusted.gpg.d/jetson-ota-public.asc \
    && echo "deb https://repo.download.nvidia.com/jetson/common r32.6 main" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list \
    && echo "deb https://repo.download.nvidia.com/jetson/t194 r32.6 main" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list \
    && apt-get update \
    && apt-get install -y \
        libnvvpi1 \
        vpi1-dev



# Update environment
ENV LD_LIBRARY_PATH="/opt/nvidia/vpi1/lib64:${LD_LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="/usr/lib/aarch64-linux-gnu/tegra:${LD_LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda-10.2/targets/aarch64-linux/lib:${LD_LIBRARY_PATH}"
ENV LD_LIBRARY_PATH="/usr/lib/aarch64-linux-gnu/tegra-egl:${LD_LIBRARY_PATH}"

# Install ROS2
ARG ROS_PKG=ros_base
ARG ROS_DISTRO=foxy
ARG ROS_ROOT=/opt/ros/${ROS_DISTRO}
#
# change the locale from POSIX to UTF-8
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    locales \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# 
# add the ROS deb repo to the apt sources list
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		curl \
		wget \
		gnupg2 \
		lsb-release \
		ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# 
# install ros2 packages
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		ros-${ROS_DISTRO}-ros-base \
		python3-colcon-common-extensions \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Restore using the default Foxy DDS middleware: FastRTPS
ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp

# Install Triton server 2.13 from https://github.com/triton-inference-server/server/releases/tag/v2.13.0
RUN apt-get update && apt-get install -y --no-install-recommends \
    autoconf \
    automake \
    libb64-dev \
    libcurl4-openssl-dev \
    libopenblas-dev \
    libre2-dev \
    libssl-dev \
    libtool \
    patchelf \
    rapidjson-dev \
    zlib1g-dev \
&& rm -rf /var/lib/apt/lists/*

RUN mkdir -p /opt/tritonserver && cd /opt/tritonserver \
    && wget https://github.com/triton-inference-server/server/releases/download/v2.13.0/tritonserver2.13.0-jetpack4.6.tgz \
    && tar -xzvf tritonserver2.13.0-jetpack4.6.tgz \
    && rm tritonserver2.13.0-jetpack4.6.tgz

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/tritonserver/lib"

# Install perception_pcl
#RUN mkdir -p /opt/ros/foxy/src && cd /opt/ros/foxy/src \
#    && git clone https://github.com/ros-perception/pcl_msgs.git && cd pcl_msgs && git checkout ros2 && cd .. \
#    && git clone https://github.com/ros-perception/perception_pcl.git \
#    && source /opt/ros/foxy/setup.bash \
#    && cd /opt/ros/foxy \
#    && rosdep install -y --ignore-src --from-paths src --rosdistro foxy \
#    && colcon build --merge-install --packages-up-to pcl_conversions \
#    && rm -Rf src logs build

# Install sensor_msgs_py
#RUN mkdir -p /opt/ros/foxy/src && cd /opt/ros/foxy/src \
#    && git clone https://github.com/ros2/common_interfaces.git && cd common_interfaces && git checkout 2.2.3 && cd .. \
#    && source /opt/ros/foxy/setup.bash \
#    && cd /opt/ros/foxy \
#    && rosdep install -y --ignore-src --from-paths src --rosdistro foxy \
#    && colcon build --merge-install --packages-up-to sensor_msgs_py \
#    && rm -Rf src logs build

# Install gcc8 for cross-compiled binaries from Ubuntu 20.04
RUN apt-get update -y && add-apt-repository -y ppa:ubuntu-toolchain-r/test && apt-get install -y \
    gcc-8 \
    g++-8 \
    libstdc++6 \
&& update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8 \
&& update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8 \
&& rm -rf /usr/bin/aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-g++ \
    /usr/bin/aarch64-linux-gnu-g++-7 /usr/bin/aarch64-linux-gnu-gcc-7 \
&& update-alternatives --install /usr/bin/aarch64-linux-gnu-gcc aarch64-linux-gnu-gcc \
    /usr/bin/gcc-8 8 \
&& update-alternatives --install /usr/bin/aarch64-linux-gnu-g++ aarch64-linux-gnu-g++ \
    /usr/bin/g++-8 8 \
&& rm -rf /var/lib/apt/lists/*

### -----------------------------

# Setup non-root admin user
ARG USERNAME=admin
ARG USER_UID=1000
ARG USER_GID=1000

# Create the 'admin' user
RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME \
    && adduser ${USERNAME} video && adduser ${USERNAME} sudo

# Copy scripts
RUN mkdir -p /usr/local/bin/scripts
COPY scripts/*entrypoint.sh /usr/local/bin/scripts/
RUN chmod +x /usr/local/bin/scripts/*.sh

# source ROS & install rosdep
#RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> /root/.bashrc
#RUN echo "source /opt/ros/foxy/install/setup.bash" > /opt/ros/foxy/setup.bash
RUN chmod 777 /opt/ros/foxy/setup.bash
RUN echo "/opt/ros/foxy/setup.bash" >> /home/admin/.bashrc
RUN apt-get install python3-pip && pip install -U rosdep && rosdep init && rosdep update

RUN export LD_LIBRARY_PATH=/opt/ros/foxy/lib/aarch_64-linux-gnu${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
RUN apt install ros-foxy-rmw-cyclonedds-cpp


ENV USERNAME=${USERNAME}
ENV USER_GID=${USER_GID}
ENV USER_UID=${USER_UID}
